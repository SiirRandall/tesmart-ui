name: Release (Fyne + SLSA)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag name to publish (e.g., v0.4.0). Required when running manually if not on a tag."
        required: false
        type: string
      prerelease:
        description: "Mark release as prerelease?"
        required: false
        type: boolean
        default: false
  release:
    types: [created]

permissions:
  contents: write
  id-token: write

env:
  APP_ID: com.siirrandall.tesmartui
  APP_NAME: TeSmart UI
  ICON_PATH: ./internal/ui/assets/tray.png
  SRC_DIR: ./cmd/tesmart-ui

jobs:
  build-linux-amd64:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Install GL/X11 dev headers for Fyne
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc build-essential pkg-config \
            libgl1-mesa-dev xorg-dev libxkbcommon-dev \
            libxrandr-dev libxxf86vm-dev libxi-dev libxcursor-dev libxinerama-dev
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22.12'
      - name: Build (linux/amd64)
        env:
          CGO_ENABLED: '1'
        run: |
          mkdir -p dist
          cd "$SRC_DIR"
          GOOS=linux GOARCH=amd64 go build -trimpath -o ../../dist/tesmart-ui-linux-amd64
          cd ../../dist
          chmod +x tesmart-ui-linux-amd64
          tar -czf tesmart-ui-linux-amd64.tar.gz tesmart-ui-linux-amd64
      - name: Upload linux binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-amd64
          path: dist/tesmart-ui-linux-amd64.tar.gz

  package-linux-appimage:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22.12'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential gcc pkg-config \
            libgl1-mesa-dev xorg-dev \
            libxrandr-dev libxxf86vm-dev libxi-dev libxcursor-dev libxinerama-dev \
            libfuse2 wget squashfs-tools desktop-file-utils

      - name: Build linux binary (amd64)
        env:
          CGO_ENABLED: '1'
        run: |
          mkdir -p dist
          cd ./cmd/tesmart-ui
          GOOS=linux GOARCH=amd64 go build -trimpath -ldflags "-s -w" -o ../../dist/tesmart-ui
          cd ../../dist
          chmod +x tesmart-ui

      - name: Assemble AppDir
        env:
          APP_ID:   ${{ env.APP_ID }}
          APP_NAME: ${{ env.APP_NAME }}
        run: |
          set -euo pipefail
          set -x
          APPDIR="AppDir"
          BIN_NAME="tesmart-ui"
          ICON_SRC="$(pwd)/internal/ui/assets/tray.png"
          DESKTOP_NAME="${APP_ID}.desktop"
          ICON_NAME="${APP_ID}.png"

          rm -rf "${APPDIR}"
          mkdir -p "${APPDIR}/usr/bin"
          mkdir -p "${APPDIR}/usr/share/applications"
          mkdir -p "${APPDIR}/usr/share/icons/hicolor/256x256/apps"

          # Binary
          cp dist/${BIN_NAME} "${APPDIR}/usr/bin/${BIN_NAME}"
          chmod +x "${APPDIR}/usr/bin/${BIN_NAME}"

          # Top-level .desktop (no spaces in filename, Icon uses ID)
          cat > "${APPDIR}/${DESKTOP_NAME}" <<EOF
          [Desktop Entry]
          Type=Application
          Name=${APP_NAME}
          Comment=${APP_NAME}
          Exec=${BIN_NAME}
          Icon=${APP_ID}
          Terminal=false
          Categories=Utility;
          EOF

          # Top-level icon (and .DirIcon symlink)
          if [ -f "${ICON_SRC}" ]; then
            cp "${ICON_SRC}" "${APPDIR}/${ICON_NAME}"
          else
            echo "WARNING: Icon not found at ${ICON_SRC}"
          fi
          ln -sf "${ICON_NAME}" "${APPDIR}/.DirIcon" || true

          # Optional: also install into usr/share for completeness
          cp "${APPDIR}/${DESKTOP_NAME}" "${APPDIR}/usr/share/applications/${DESKTOP_NAME}"
          if [ -f "${APPDIR}/${ICON_NAME}" ]; then
            cp "${APPDIR}/${ICON_NAME}" "${APPDIR}/usr/share/icons/hicolor/256x256/apps/${ICON_NAME}"
          fi

          # AppRun
          cat > "${APPDIR}/AppRun" << 'EOF'
          #!/usr/bin/env sh
          HERE="$(dirname "$(readlink -f "$0")")"
          export PATH="$HERE/usr/bin:$PATH"
          exec "$HERE/usr/bin/tesmart-ui" "$@"
          EOF
          chmod +x "${APPDIR}/AppRun"

          # Diagnostics
          echo "== AppDir summary =="
          find "${APPDIR}" -maxdepth 2 -type f -printf "%M %p\n" | sort
          echo "== desktop-file-validate (verbose) =="
          desktop-file-validate -v "${APPDIR}/${DESKTOP_NAME}" || true
          echo "== file(1) on binary =="
          file "${APPDIR}/usr/bin/${BIN_NAME}" || true
          echo "== ldd on binary =="
          ldd "${APPDIR}/usr/bin/${BIN_NAME}" || true

      - name: Build AppImage
        env:
          APP_NAME: ${{ env.APP_NAME }}
          APP_ID:   ${{ env.APP_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          set -x

          # Validate .desktop strictly before building
          desktop-file-validate "AppDir/${APP_ID}.desktop"

          # Sanity checks
          test -x AppDir/AppRun
          test -f "AppDir/${APP_ID}.desktop"
          test -f "AppDir/${APP_ID}.png"

          # Download appimagetool with retries and fallbacks
          urls=(
            "https://github.com/AppImage/AppImageKit/releases/latest/download/appimagetool-x86_64.AppImage"
            "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
            "https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage"
          )

          ok=0
          for u in "${urls[@]}"; do
            echo "Fetching appimagetool from: $u"
            if curl -fsSL --retry 5 --retry-delay 2 --retry-all-errors -A "CI-Agent" -o appimagetool "$u"; then
              ok=1; break
            fi
          done
          if [ "$ok" -ne 1 ]; then
            echo "Failed to download appimagetool from all sources"
            exit 1
          fi
          chmod +x appimagetool
          ./appimagetool --version || true

          # Ensure squashfs is available
          command -v mksquashfs

          # Helpful metadata
          export VERSION="${GITHUB_REF_NAME:-$(date +%Y%m%d)}"
          export ARCH="x86_64"

          # Build AppImage (verbose, skip appstream)
          ./appimagetool -v --no-appstream AppDir "${APP_NAME}.AppImage" 2>&1 | tee appimagetool.log || {
            echo "appimagetool failed. Dumping AppDir tree and log tail:"
            find AppDir -maxdepth 4 -type f -printf "%M %p\n" | sort
            tail -n 200 appimagetool.log || true
            exit 1
          }

          mkdir -p dist
          chmod +x "${APP_NAME}.AppImage"
          mv "${APP_NAME}.AppImage" dist/tesmart-ui-linux.AppImage
          
      - name: Upload Linux AppImage
        uses: actions/upload-artifact@v4
        with:
          name: linux-appimage
          path: dist/tesmart-ui-linux.AppImage

  build-macos-amd64:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22.12'
      - name: Install fyne CLI
        run: |
          go install fyne.io/tools/cmd/fyne@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH
      - name: Package macOS app (amd64)
        run: |
          set -euo pipefail
          mkdir -p dist
          ICON_ABS="$(pwd)/internal/ui/assets/tray.png"
          fyne package --os darwin --name "${APP_NAME}" --app-id "${APP_ID}" --icon "${ICON_ABS}" --release --source-dir "${SRC_DIR}"
          codesign --force --deep --sign - "${APP_NAME}.app"
          ditto -c -k --sequesterRsrc --keepParent "${APP_NAME}.app" "dist/tesmart-ui-macos-amd64.zip"
      - name: Upload macOS amd64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-amd64
          path: dist/tesmart-ui-macos-amd64.zip

  build-macos-arm64:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22.12'
      - name: Install fyne CLI
        run: |
          go install fyne.io/tools/cmd/fyne@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH
      - name: Package macOS app (arm64)
        run: |
          set -euo pipefail
          mkdir -p dist
          ICON_ABS="$(pwd)/internal/ui/assets/tray.png"
          GOOS=darwin GOARCH=arm64 fyne package --os darwin --name "${APP_NAME}" --app-id "${APP_ID}" --icon "${ICON_ABS}" --release --source-dir "${SRC_DIR}"
          codesign --force --deep --sign - "${APP_NAME}.app"
          ditto -c -k --sequesterRsrc --keepParent "${APP_NAME}.app" "dist/tesmart-ui-macos-arm64.zip"
      - name: Upload macOS arm64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64
          path: dist/tesmart-ui-macos-arm64.zip

  build-windows-amd64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install MSYS2 MinGW
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-pkg-config
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22.12'
      - name: Build (windows/amd64)
        shell: bash
        env:
          CGO_ENABLED: '1'
          CC: x86_64-w64-mingw32-gcc
          CXX: x86_64-w64-mingw32-g++
        run: |
          mkdir -p dist
          cd "$SRC_DIR"
          GOOS=windows GOARCH=amd64 go build -trimpath -ldflags "-H=windowsgui -s -w" -o ../../dist/tesmart-ui-windows-amd64.exe
          cd ../../dist
          powershell -Command "Compress-Archive -Path tesmart-ui-windows-amd64.exe -DestinationPath tesmart-ui-windows-amd64.zip"
      - name: Upload windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-amd64
          path: dist/tesmart-ui-windows-amd64.zip

  publish:
    needs:
      - build-linux-amd64
      - package-linux-appimage
      - build-macos-amd64
      - build-macos-arm64
      - build-windows-amd64
    runs-on: ubuntu-22.04
    env:
      TAG: ${{ github.ref_type == 'tag' && github.ref_name || inputs.tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Fail if no tag was provided on manual run
        if: ${{ github.ref_type != 'tag' && (inputs.tag == '' || inputs.tag == null) }}
        run: |
          echo "This workflow requires a tag. Provide one via 'Run workflow' → tag (e.g., v0.4.0), or push a tag and run on that."
          exit 1
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - name: Restore exec bits
        run: |
          chmod +x dist/tesmart-ui-linux-amd64 || true
          chmod +x dist/tesmart-ui-linux.AppImage || true
      - name: Upload assets to the Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          generate_release_notes: true
          make_latest: true
          prerelease: ${{ inputs.prerelease == true }}
          files: |
            dist/tesmart-ui-linux-amd64.tar.gz
            dist/tesmart-ui-linux.AppImage
            dist/tesmart-ui-macos-amd64.zip
            dist/tesmart-ui-macos-arm64.zip
            dist/tesmart-ui-windows-amd64.zip