name: Release (Fyne + SLSA)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag name to publish (e.g., v0.4.0). Required when running manually if not on a tag."
        required: false
        type: string
      prerelease:
        description: "Mark release as prerelease?"
        required: false
        type: boolean
        default: false
  release:
    types: [created]

permissions:
  contents: write
  id-token: write

jobs:
  build-linux-amd64:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install GL/X11 dev headers for Fyne
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc pkg-config libgl1-mesa-dev xorg-dev libxkbcommon-dev

      - uses: actions/setup-go@v5
        with:
          go-version: '1.22.12'

      - name: Build (linux/amd64)
        env:
          CGO_ENABLED: '1'
        run: |
          mkdir -p dist
          cd cmd/tesmart-ui
          GOOS=linux GOARCH=amd64 go build -trimpath -o ../../dist/tesmart-ui-linux-amd64

      - name: Upload linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-amd64
          path: dist/tesmart-ui-linux-amd64

  build-macos-amd64:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: '1.22.12'

      - name: Build (darwin/amd64)
        env:
          CGO_ENABLED: '1'
        run: |
          mkdir -p dist
          cd cmd/tesmart-ui
          GOOS=darwin GOARCH=amd64 go build -trimpath -o ../../dist/tesmart-ui-macos-amd64

      - name: Upload macOS amd64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-amd64
          path: dist/tesmart-ui-macos-amd64

  build-macos-arm64:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: '1.22.12'

      - name: Build (darwin/arm64)
        env:
          CGO_ENABLED: '1'
        run: |
          mkdir -p dist
          cd cmd/tesmart-ui
          GOOS=darwin GOARCH=arm64 go build -trimpath -o ../../dist/tesmart-ui-macos-arm64

      - name: Upload macOS arm64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64
          path: dist/tesmart-ui-macos-arm64

  build-windows-amd64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install MSYS2 MinGW
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-pkg-config

      - uses: actions/setup-go@v5
        with:
          go-version: '1.22.12'

      - name: Build (windows/amd64)
        shell: bash
        env:
          CGO_ENABLED: '1'
          CC: x86_64-w64-mingw32-gcc
          CXX: x86_64-w64-mingw32-g++
        run: |
          mkdir -p dist
          cd cmd/tesmart-ui
          GOOS=windows GOARCH=amd64 go build -trimpath -o ../../dist/tesmart-ui-windows-amd64.exe

      - name: Upload windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-amd64
          path: dist/tesmart-ui-windows-amd64.exe

  publish:
    needs:
      - build-linux-amd64
      - build-macos-amd64
      - build-macos-arm64
      - build-windows-amd64
    runs-on: ubuntu-22.04
    # Resolve the tag for both tag-trigger and manual runs:
    env:
      TAG: ${{ github.ref_type == 'tag' && github.ref_name || inputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Fail if no tag was provided on manual run
        if: ${{ github.ref_type != 'tag' && (inputs.tag == '' || inputs.tag == null) }}
        run: |
          echo "This workflow requires a tag. Provide one via 'Run workflow' â†’ tag (e.g., v0.4.0), or push a tag and run on that."
          exit 1

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: List artifacts (debug)
        run: ls -l dist

      - name: Upload assets to the Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          generate_release_notes: true
          make_latest: true
          prerelease: ${{ inputs.prerelease == true }}
          files: |
            dist/tesmart-ui-linux-amd64
            dist/tesmart-ui-macos-amd64
            dist/tesmart-ui-macos-arm64
            dist/tesmart-ui-windows-amd64.exe

  hash-subjects:
    needs:
      - build-linux-amd64
      - build-macos-amd64
      - build-macos-arm64
      - build-windows-amd64
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Create base64-encoded subject list (sha256sum output)
        id: subjects
        run: |
          set -euo pipefail
          ls -l dist
          files="dist/tesmart-ui-linux-amd64 dist/tesmart-ui-macos-amd64 dist/tesmart-ui-macos-arm64 dist/tesmart-ui-windows-amd64.exe"
          echo "hashes=$(sha256sum $files | base64 -w0)" >> "$GITHUB_OUTPUT"
    outputs:
      hashes: ${{ steps.subjects.outputs.hashes }}

  slsa-provenance:
    needs: [hash-subjects, publish]
    permissions:
      actions: read     # to read workflow path
      id-token: write   # to sign the provenance
      contents: write   # to upload provenance to the release
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: ${{ needs.hash-subjects.outputs.hashes }}
      upload-assets: true